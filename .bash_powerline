#!/usr/bin/env bash

## Uncomment to disable git info
#POWERLINE_GIT=0

__powerline() {
    # Colorscheme
    readonly RESET='\[\033[m\]'
    readonly COLOR_CWD='\[\033[0;34m\]' # blue
    readonly COLOR_GIT='\[\033[0;36m\]' # cyan
    readonly COLOR_SUCCESS='\[\033[0;32m\]' # green
    readonly COLOR_FAILURE='\[\033[0;31m\]' # red
    readonly COLOR_YELLOW='\[\033[0;33m\]' # yellow
    readonly COLOR_MAGENTA='\[\033[0;35m\]' # magenta
    readonly COLOR_CYAN='\[\033[0;36m\]' # cyan
    readonly COLOR_WHITE='\[\033[0;37m\]' # white

    if [[ -z "$PS_SYMBOL" ]]; then
      case "$(uname)" in
          Darwin)   PS_SYMBOL='';;
          Linux)    PS_SYMBOL='\$';;
          *)        PS_SYMBOL='%';;
      esac
    fi

    __git_info() { 
        [[ $POWERLINE_GIT = 0 ]] && return # disabled
        hash git 2>/dev/null || return # git not found
        local git_eng="env LANG=C git"   # force git output in English to make our work easier

        # Symbols
        if [[ -z "$SYMBOL_GIT_BRANCH" ]]; then
          case "$(uname)" in
              Darwin)   SYMBOL_GIT_BRANCH='⑂';;
              *)        SYMBOL_GIT_BRANCH='❱';;
          esac
        fi
        SYMBOL_GIT_MODIFIED=${SYMBOL_GIT_MODIFIED:-*}
        SYMBOL_GIT_PUSH=${SYMBOL_GIT_PUSH:-↑}
        SYMBOL_GIT_PULL=${SYMBOL_GIT_PULL:-↓}

        # addされていない変更を「*」commitされていない変更を「+」で示す
        GIT_PS1_SHOWDIRTYSTATE=true
        # addされていない新規ファイルの存在を「%」で示す
        GIT_PS1_SHOWUNTRACKEDFILES=true
        # stashがある場合は「$」で示す
        GIT_PS1_SHOWSTASHSTATE=true
        # upstreamと同期「=」進んでいる「>」遅れている「<」で示す
        unset GIT_PS1_SHOWUPSTREAM
        # ステートとrefの間を開けない
        GIT_PS1_STATESEPARATOR=""

        # get current branch name
        local ref=$(__git_ps1 "%s")
        if [[ -n "$ref" ]]; then
            # prepend branch symbol
            ref=$SYMBOL_GIT_BRANCH$ref
        else
            # get tag name or short unique hash
            ref=$SYMBOL_GIT_BRANCH$($git_eng describe --tags --always 2>/dev/null)
        fi
        [[ -n "$ref" ]] || return  # not a git repo

        local upstream_diff
        # scan first two lines of output from `git status`
        while IFS= read -r line; do
            if [[ $line =~ ^## ]]; then # header line
                [[ $line =~ ahead\ ([0-9]+) ]] && upstream_diff+=" $SYMBOL_GIT_PUSH${BASH_REMATCH[1]}"
                [[ $line =~ behind\ ([0-9]+) ]] && upstream_diff+=" $SYMBOL_GIT_PULL${BASH_REMATCH[1]}"
            fi
        done < <($git_eng status --porcelain --branch 2>/dev/null)  # note the space between the two <

        # print the git branch segment without a trailing newline
        printf "%s%s" "$ref" "$upstream_diff"
    }

    ps1() {
        # Check the exit code of the previous command and display different
        # colors in the prompt accordingly. 
        if [ $? -eq 0 ]; then
            local symbol="$COLOR_SUCCESS $PS_SYMBOL $RESET"
        else
            local symbol="$COLOR_FAILURE $PS_SYMBOL $RESET"
        fi

        local cwd="$COLOR_MAGENTA[\w]$RESET"
        # Bash by default expands the content of PS1 unless promptvars is disabled.
        # We must use another layer of reference to prevent expanding any user
        # provided strings, which would cause security issues.
        # POC: https://github.com/njhartwell/pw3nage
        # Related fix in git-bash: https://github.com/git/git/blob/9d77b0405ce6b471cb5ce3a904368fc25e55643d/contrib/completion/git-prompt.sh#L324
        if shopt -q promptvars; then
            __powerline_git_info="$(__git_info)"
            local git="$COLOR_GIT\${__powerline_git_info}$RESET"
        else
            # promptvars is disabled. Avoid creating unnecessary env var.
            local git="$COLOR_GIT$(__git_info)$RESET"
        fi
        
        #add user@host
        host="${COLOR_SUCCESS}[\u@\H]${RESET}"

        source kube-ps1

        PS1="\n$host$cwd $git $(type kubectl >/dev/null 2>&1 && kube_ps1)\n[$(date '+%Y/%m/%d %H:%M:%S')]$symbol"
    }

    PROMPT_COMMAND="ps1${PROMPT_COMMAND:+; $PROMPT_COMMAND}"
}

__powerline
unset __powerline
